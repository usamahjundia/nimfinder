{"version":3,"sources":["SearchBar.js","List.js","CONST.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","searchBarState","changeSearchBarState","loading","className","type","name","value","onChange","e","target","toLowerCase","codeDict","codeToEmblem","nim","slice","List","mhsList","map","elmt","length","DATA_MAHASISWA_KEY","DATA_VERSION_KEY","App","useState","allmhsRef","useRef","undefined","shownMahasiswa","changeShownMahasiswa","setLoading","useEffect","localStorage","getItem","a","async","fetch","process","temp","text","ver","setItem","current","JSON","parse","oldVer","newVer","json","filter","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fe75b43.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SearchBar.css'\r\n\r\nexport default function SearchBar({searchBarState,changeSearchBarState,loading}){\r\n\r\n    const changeState = (e)=>{\r\n        changeSearchBarState(e.target.value.toLowerCase());\r\n    }\r\n\r\n    return (\r\n        <div className=\"Searchbar\">\r\n            <div className=\"Searchbar-tooltip\">\r\n                <p>Insert your query here</p>\r\n            </div>\r\n            <input\r\n                className=\"Searchbar-input\"\r\n                type=\"text\"\r\n                name=\"searchValue\"\r\n                value={searchBarState}\r\n                onChange={changeState}\r\n                // disabled={loading}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport \"./List.css\"\r\n\r\nconst codeDict = {\r\n    \"160\": \"FMIPA\",\r\n    \"161\": \"SITH\",\r\n    \"162\": \"SF\",\r\n    \"163\": \"FITB\",\r\n    \"164\": \"FTTM\",\r\n    \"165\": \"STEI\",\r\n    \"166\": \"FTSL\",\r\n    \"167\": \"FTI\",\r\n    \"168\": \"FSRD\",\r\n    \"169\": \"FTMD\",\r\n    \"197\": \"SBM\",\r\n    \"199\": \"SAPPK\",\r\n    \"101\": \"MA\",\r\n    \"102\": \"FI\",\r\n    \"103\": \"AS\",\r\n    \"104\": \"BM\",\r\n    \"105\": \"KI\",\r\n    \"106\": \"BI\",\r\n    \"107\": \"FA\",\r\n    \"108\": \"ME\",\r\n    \"112\": \"BE\",\r\n    \"114\": \"BA\",\r\n    \"115\": \"BW\",\r\n    \"116\": \"FKK\",\r\n    \"120\": \"GL\",\r\n    \"121\": \"TA\",\r\n    \"122\": \"TM\",\r\n    \"123\": \"TG\",\r\n    \"125\": \"MG\",\r\n    \"128\": \"ME\",\r\n    \"129\": \"OS\",\r\n    \"130\": \"TK\",\r\n    \"131\": \"MS\",\r\n    \"132\": \"EL\",\r\n    \"133\": \"FT\",\r\n    \"134\": \"TI\",\r\n    \"135\": \"IF\",\r\n    \"136\": \"AE\",\r\n    \"137\": \"MT\",\r\n    \"144\": \"MRI\",\r\n    \"150\": \"SI\",\r\n    \"151\": \"GD\",\r\n    \"152\": \"AR\",\r\n    \"153\": \"TL\",\r\n    \"154\": \"PWK\",\r\n    \"155\": \"KL\",\r\n    \"157\": \"RIL\",\r\n    \"170\": \"SR\",\r\n    \"172\": \"KR\",\r\n    \"173\": \"DI\",\r\n    \"174\": \"DKV\",\r\n    \"175\": \"DP\",\r\n    \"180\": \"EP\",\r\n    \"181\": \"ET\",\r\n    \"182\": \"STI\",\r\n    \"183\": \"EB\",\r\n    \"190\": \"MB\",\r\n    \"192\": \"MK\"\r\n}\r\n\r\nconst codeToEmblem = (nim) => {\r\n    if (nim === \"13215072\") {\r\n        return \"'IF'\"\r\n    }\r\n    return codeDict[nim.slice(0, 3)]\r\n}\r\n\r\nexport default function List({ loading, mhsList }) {\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"List-loading\">\r\n                <h2 className=\"List-loading-h2\">\r\n                    Please Wait..\r\n                </h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"List\">\r\n            <div className=\"List-list\">\r\n                {mhsList.map((elmt) => {\r\n                    return (\r\n                        <div className=\"List-elements\">\r\n                            <div className=\"List-elements-emblem\">\r\n                                {codeToEmblem(elmt[1])}\r\n                            </div>\r\n                            <div className=\"List-elements-minfo\">\r\n                                <div className=\"List-elements-name\">\r\n                                    {elmt[0]}\r\n                                </div>\r\n                                <div className=\"List-elements-nim\">\r\n                                    {elmt[1]}{elmt.length === 3 ? \"/\"+elmt[2] : false}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","export const DATA_MAHASISWA_KEY = \"data_mahasiswa\";\r\nexport const DATA_VERSION_KEY = \"version\";","import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport SearchBar from './SearchBar';\nimport List from './List';\nimport {DATA_MAHASISWA_KEY,DATA_VERSION_KEY} from \"./CONST\"\n\nfunction App() {\n    let [searchBarState, changeSearchBarState] = useState(\"\");\n    let allmhsRef = useRef(undefined);\n    let [shownMahasiswa, changeShownMahasiswa] = useState([]);\n    let [loading, setLoading] = useState(false);\n    useEffect(()=>{\n        setLoading(true)\n        if((localStorage.getItem(DATA_MAHASISWA_KEY) == null) || localStorage.getItem(DATA_VERSION_KEY) == null){\n            (async ()=>{\n                let temp = await fetch(`${process.env.PUBLIC_URL}/data/datamahasiswa.json`);\n                temp = await temp.text();\n                let ver = await fetch(`${process.env.PUBLIC_URL}/data/version.json`);\n                ver = await ver.text();\n                localStorage.setItem(DATA_MAHASISWA_KEY,temp);\n                localStorage.setItem(DATA_VERSION_KEY,ver);\n                allmhsRef.current  = JSON.parse(temp);\n                setLoading(false);\n            })();\n        }else{\n            (async () => {\n                let oldVer = localStorage.getItem(DATA_VERSION_KEY);\n                oldVer = JSON.parse(oldVer);\n                let newVer = await fetch(`${process.env.PUBLIC_URL}/data/version.json`);\n                newVer = await newVer.json()\n                if (newVer['updated_date'] !== oldVer['updated_date']){\n                    let temp = await fetch(`${process.env.PUBLIC_URL}/data/datamahasiswa.json`);\n                    temp = await temp.text();\n                    localStorage.setItem(DATA_MAHASISWA_KEY,temp);\n                    allmhsRef.current  = JSON.parse(temp);\n                }else{\n                    let temp = localStorage.getItem(DATA_MAHASISWA_KEY);\n                    allmhsRef.current = JSON.parse(temp);\n                }\n                setLoading(false);\n            })()\n        }\n    },[]);\n    useEffect(()=>{\n        if(searchBarState === '' || searchBarState.length < 3){\n            changeShownMahasiswa([]);\n        }else{\n            setLoading(true);\n            (async()=>{\n                let temp = await allmhsRef.current.filter((elmt)=>{\n                    return (elmt[0].toLowerCase().indexOf(searchBarState) !== -1) || (elmt[1].indexOf(searchBarState) !== -1) || (elmt.length === 2 ? false :  (elmt[2].indexOf(searchBarState) !== -1))\n                });\n                changeShownMahasiswa(temp);\n                setLoading(false);\n            })()\n        }\n    },[searchBarState]);\n    return (\n        <div className=\"App\">\n            <h1 className='Title'>NIM Finder ITB</h1>\n            <SearchBar \n                searchBarState={searchBarState}\n                changeSearchBarState={changeSearchBarState}\n                // loading={loading}\n                />\n            <List\n                loading={loading}\n                mhsList={shownMahasiswa}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}